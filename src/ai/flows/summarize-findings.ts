'use server';

/**
 * @fileOverview Summarizes the certificate analysis findings generated by Gemini.
 *
 * - summarizeFindings - A function that summarizes the analysis findings.
 * - SummarizeFindingsInput - The input type for the summarizeFindings function.
 * - SummarizeFindingsOutput - The return type for the summarizeFindings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SummarizeFindingsInputSchema = z.object({
  analysisResult: z
    .any()
    .describe(
      'The full JSON object returned by the Gemini API, containing the analysis of the certificate.'
    ),
});
export type SummarizeFindingsInput = z.infer<typeof SummarizeFindingsInputSchema>;

const SummarizeFindingsOutputSchema = z.object({
  summary: z
    .string()
    .describe(
      'A concise summary of the certificate analysis findings, highlighting key aspects of authenticity or potential issues.'
    ),
});
export type SummarizeFindingsOutput = z.infer<typeof SummarizeFindingsOutputSchema>;

export async function summarizeFindings(input: SummarizeFindingsInput): Promise<SummarizeFindingsOutput> {
  return summarizeFindingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'summarizeFindingsPrompt',
  input: {schema: SummarizeFindingsInputSchema},
  output: {schema: SummarizeFindingsOutputSchema},
  prompt: `You are an expert at summarizing forensic document analysis results.

  Given the following analysis result, create a concise summary highlighting the key aspects of authenticity or potential issues.

  Analysis Result: {{{analysisResult}}}

  Summary: `,
});

const summarizeFindingsFlow = ai.defineFlow(
  {
    name: 'summarizeFindingsFlow',
    inputSchema: SummarizeFindingsInputSchema,
    outputSchema: SummarizeFindingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
